from abc import ABC, abstractmethod
from dataclasses import dataclass

from src.helpers import text_operation


@dataclass
class ModelVariables(ABC):

    @property
    @abstractmethod
    def x_variables(self) -> list[str]:
        raise NotImplementedError

    @property
    @abstractmethod
    def y_variable(self) -> str:
        raise NotImplementedError

    @property
    @abstractmethod
    def rename_variables_dict(self) -> dict[str, str]:
        raise NotImplementedError


@dataclass
class Model_V1(ModelVariables):

    x_variables = ['census_Age_Tot_65_74_pct', 'census_Age_Tot_75_over_pct', 'census_Pop_No_degree_pct',
                   'census_Household_One_person_pct', 'census_Household_Renter_pct', 'ndvi_built_pct', 'canue_pm25']
    y_variable = "delta_mean_dx_tot_deaths_rate"
    rename_variables_dict = text_operation.wrap_dict_value_text(
        dict_in={'census_Age_Tot_65_74_pct': 'Population between the ages of 65 and 74',
                 'census_Age_Tot_75_over_pct': 'Population above the age of 75',
                 'census_Pop_No_degree_pct': 'Population without a degree',
                 'census_Household_One_person_pct': 'One-person household',
                 'census_Household_Renter_pct': 'Renter',
                 'ndvi_built_pct': 'Built area based on the NDVI',
                 'canue_pm25': 'Monthly average concentration of PM25'})
