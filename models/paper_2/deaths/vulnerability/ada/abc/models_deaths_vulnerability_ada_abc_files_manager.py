from abc import ABC, abstractmethod
import inspect
from pathlib import Path
import os
from typing import NoReturn

import src.models.paper_2
from src.helpers import pd_operation

from src.models.paper_2.deaths.vulnerability.ada.abc.models_deaths_vulnerability_ada_abc_processed_files import (
    AbstractBaseModels_Deaths_Vulnerability_ADA_ProcessedFile)

from src.base.files_manager.files_manager_abc import AbstractBaseFilesManager
from src.base.files_manager.files_export import DfExport
from src.base.files_manager.files_path import FilesManagerClassPaths, MethodPathOutput


from sklearn.metrics import f1_score, accuracy_score, root_mean_squared_error

from src.base.files.standard_columns_names import Time_StandardColumnNames
from src.models.models_visualization import SkLearnConfusionMatrix
import pandas as pd
import matplotlib.pyplot as plt

class AbstractModels_Vulnerability_ADA_FilesManager(AbstractBaseFilesManager, ABC):

    def __init__(self, features_standardize_format_file: str,
                 model_vulnerability_processed_class: AbstractBaseModels_Deaths_Vulnerability_ADA_ProcessedFile):
        self.model_vulnerability_processed_class = model_vulnerability_processed_class
        self.features_standardize_format_file = features_standardize_format_file

    @property
    def _files_manager_class_paths(self) -> FilesManagerClassPaths:
        return FilesManagerClassPaths(
            module_name=src.models.paper_2.__name__.split('.')[-2],
            optional_module_sub_dir=src.models.paper_2.__name__.split('.')[-1],
            files_manager_class_name=self.__class__.__name__,
            optional_filemanager_sub_dir=self.model_vulnerability_processed_class.filename,
            processed_class_filename=self.model_vulnerability_processed_class.filename)

    @abstractmethod
    def summer_test_prediction(self):
        raise NotImplementedError

    def standardize_format(self) -> NoReturn:
        complete_results_dfs = []

        method_path = MethodPathOutput(
            files_manager_class_paths=self.files_manager_class_paths,
            current_method_name=inspect.currentframe().f_code.co_name)

        path_in = self.files_manager_class_paths.load_previous_method_path(
            previous_method_name=self.summer_test_prediction.__name__,
            optional_method_sub_dir=os.path.join('results'))

        complete_daily_results_path = Path(path_in).rglob('*.parquet')

        df_region_standardize_results = pd_operation.concat_rglob(parquet_paths=complete_daily_results_path)
        complete_results_dfs.append(df_region_standardize_results)

        df_out = pd_operation.concat_dfs(dfs=complete_results_dfs)

        export_yearly_results = DfExport(df_out=df_out,
                                         path_out=method_path.path_out,
                                         filename_out=method_path.filename_out)
        export_yearly_results.to_csv()
        export_yearly_results.to_parquet()

    def results_std_classification(self):
        method_path = MethodPathOutput(
            files_manager_class_paths=self.files_manager_class_paths,
            current_method_name=inspect.currentframe().f_code.co_name)

        path_in = self.files_manager_class_paths.load_previous_method_file(
            previous_method_name=self.standardize_format.__name__)

        df_out = self.model_vulnerability_processed_class.results_std_classification(path_in=path_in)

        export_results_std_classification = DfExport(df_out=df_out,
                                                     path_out=method_path.path_out,
                                                     filename_out=method_path.filename_out)
        export_results_std_classification.to_csv()
        export_results_std_classification.to_parquet()

    def make_confusion_matrix(self):
        method_path = MethodPathOutput(
            files_manager_class_paths=self.files_manager_class_paths,
            current_method_name=inspect.currentframe().f_code.co_name)

        path_in = self.files_manager_class_paths.load_previous_method_file(
            previous_method_name=self.results_std_classification.__name__)

        self.model_vulnerability_processed_class.make_confusion_matrix(path_in=path_in,
                                                                       sub_path_out=method_path.path_out)

    def result_rmse(self):
        method_path = MethodPathOutput(
            files_manager_class_paths=self.files_manager_class_paths,
            current_method_name=inspect.currentframe().f_code.co_name)

        path_in = self.files_manager_class_paths.load_previous_method_file(
            previous_method_name=self.results_std_classification.__name__)

        df_results_rmse = self.model_vulnerability_processed_class.results_rmse(path_in=path_in)

        export_results_rmse = DfExport(df_out=df_results_rmse,
                                       path_out=method_path.path_out,
                                       filename_out=method_path.filename_out)
        export_results_rmse.to_csv()
        export_results_rmse.to_parquet()

    def make_files(self, summer_test_prediction: bool = False, standardize_format: bool = False,
                   results_std_classification: bool = False, make_confusion_matrix: bool = False,
                   result_rmse: bool = False, make_all: bool = False) -> NoReturn:
        if summer_test_prediction | make_all:
            self.summer_test_prediction()
        if standardize_format | make_all:
            self.standardize_format()
        if results_std_classification | make_all:
            self.results_std_classification()
        if make_confusion_matrix | make_all:
            self.make_confusion_matrix()
        if result_rmse | make_all:
            self.result_rmse()
