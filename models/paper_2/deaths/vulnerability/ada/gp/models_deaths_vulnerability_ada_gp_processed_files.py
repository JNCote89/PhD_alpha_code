import gpflow
from abc import ABC, abstractmethod
import textwrap

from src.models.paper_2.deaths.vulnerability.ada.abc.models_deaths_vulnerability_ada_abc_processed_files import (
    AbstractBaseModels_Deaths_Vulnerability_ADA_ProcessedFile)
from src.ai.gp_family.kernel_utils import (GPFlow_KernelBuilder, GPFlow_GPR_EquationBuilder)

from src.models.paper_2.deaths.vulnerability.models_deaths_vulnerability_ada_variables import (Variables_F1_V1)


class AbstractModels_GPR_Deaths_Vulnerability_ADA_ProcessedFile(
    AbstractBaseModels_Deaths_Vulnerability_ADA_ProcessedFile, ABC):

    @property
    def _model_algorithm(self) -> str:
        return "GP"

    @property
    def _model_scope(self) -> str:
        return "vulnerability"

    @property
    def _model_vulnerability(self) -> str:
        return "deaths"

    @property
    def gpr_equation_builder(self) -> GPFlow_GPR_EquationBuilder:
        return self._gpr_equation_builder

    @property
    @abstractmethod
    def _gpr_equation_builder(self) -> GPFlow_GPR_EquationBuilder:
        raise NotImplementedError

    @property
    def _plot_title_suffix(self):
        return f"x_variables : {textwrap.fill(str(self.x_variables), 120)} \n " \
               f"kernel: {textwrap.fill(self.gpr_equation_builder.kernel_metadata, 120)}"


class Model_GPR_Deaths_Vulnerability_ADA_Processing_F1_M1_V1(AbstractModels_GPR_Deaths_Vulnerability_ADA_ProcessedFile):
    _x_variables = Variables_F1_V1.x_variables
    _y_variable = Variables_F1_V1.y_variable
    _rename_variables_dict = Variables_F1_V1.rename_variables_dict

    @property
    def _gpr_equation_builder(self) -> GPFlow_GPR_EquationBuilder:
        k1 = GPFlow_KernelBuilder(key='k1', gpflow_kernel=gpflow.kernels.RBF())

        return GPFlow_GPR_EquationBuilder(kernel_builder_list=[k1],
                                          kernel_builder_key_equation=f"{k1.key}",
                                          x_variables=self._x_variables,
                                          y_variable=self._y_variable)

