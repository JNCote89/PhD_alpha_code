from abc import ABC, abstractmethod
from dataclasses import dataclass

from src.helpers import text_operation


@dataclass
class ModelVariables(ABC):

    @property
    @abstractmethod
    def x_variables(self) -> list[str]:
        raise NotImplementedError

    @property
    @abstractmethod
    def y_variable(self) -> str:
        raise NotImplementedError

    @property
    @abstractmethod
    def rename_variables_dict(self) -> dict[str, str]:
        raise NotImplementedError


@dataclass
class Variables_F1_V1(ModelVariables):
    """
    From the Features_Deaths_Vulnerability_ADA_Processing_A class.
    """
    x_variables = ['delta_census_Age_Tot_65_74_pct', 'delta_census_Age_Tot_75_84_pct',
                   'delta_census_Age_Tot_85_over_pct',
                   'delta_census_Household_One_person_pct', 'delta_census_Pop_Renter_pct',
                   'delta_census_Pop_Lico_at_pct', 'delta_census_Pop_No_degree_pct',
                   'delta_population_above_30_pct_ndvi_300m_pct']

    y_variable = 'delta_mean_dx_tot_deaths_rate'
    rename_variables_dict = text_operation.wrap_dict_value_text(
        dict_in={'delta_census_Age_Tot_65_74_pct': 'Population between the ages of 65 and 74',
                 'delta_census_Age_Tot_75_84_pct': 'Population between the ages of 75 and 84',
                 'delta_census_Age_Tot_85_over_pct': 'Population above the age of 85',
                 'delta_census_Pop_Lico_at_pct': 'Low income cut-offs after tax (LICO)',
                 'delta_census_Pop_No_degree_pct': 'Population without a degree',
                 'delta_census_Household_One_person_pct': 'One-person household',
                 'delta_population_above_30_pct_ndvi_300m_pct': 'Minimum 30% of vegetation within 300m',
                 "delta_census_Pop_Renter_pct": "Renter"},
        wrap_length=22)
